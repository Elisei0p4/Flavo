name: Django CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: pip install -r requirements-dev.lock
      - name: Run Ruff linter
        run: ruff check .
      - name: Run Black formatter check
        run: black --check .
      - name: Check for missing migrations
        run: python manage.py makemigrations --check --dry-run --settings=pizza_project.settings.local
  
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env: { POSTGRES_DB: test_db, POSTGRES_USER: test_user, POSTGRES_PASSWORD: test_password }
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: '3.11', cache: 'pip' }
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.lock
      - name: Run tests with coverage
        run: pytest --cov=. --cov-report=xml --cov-report=term-missing
        env:
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: 'False'
          DJANGO_SETTINGS_MODULE: 'pizza_project.settings.local'
          DATABASE_URL: ${{ secrets.CI_DATABASE_URL }}
          CELERY_TASK_ALWAYS_EAGER: 'True'
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 7

  test-frontend: 
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Linting
        run: npm run lint
      - name: Run Unit Tests (Jest)
        run: npm test -- --ci --json --outputFile=jest-results.json
      - name: Run E2E Tests (Playwright)
        run: npx playwright test
      - name: Upload Jest report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jest-results
          path: frontend/jest-results.json
          retention-days: 30
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend] 
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          labels: ${{ steps.meta.outputs.labels }}
      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.nginx.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nginx:latest
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script: |
            # Переходим в директорию проекта
            cd /opt/pizza-project
            
            # ВНИМАНИЕ: Этот метод деплоя приводит к кратковременному простою (downtime).
            # Для zero-downtime деплоя рассмотрите стратегии Blue/Green или Rolling Updates
            # с использованием Docker Swarm, Kubernetes или других оркестраторов.
            
            # Останавливаем текущие контейнеры
            docker-compose -f docker-compose.prod.yml down
            
            # Обновляем образы
            docker-compose -f docker-compose.prod.yml pull
            
            # Запускаем обновленные контейнеры
            docker-compose -f docker-compose.prod.yml up -d
            
            # Очищаем неиспользуемые образы
            docker system prune -f
            
            echo "Deployment completed successfully!"